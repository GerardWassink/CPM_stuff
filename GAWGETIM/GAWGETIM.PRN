

                ;* ------------------------------------------------------------------------- *
                ;* Name   : GAWGETIM
                ;* Author : Gerard Wassink
                ;* Date   : December 25, 2021
                ;* Purpose: Get RTC time on the RC2014 CP/M computer
                ;* Versions:
                ;*   0.1  : Initial code base, and 1st ASM program on CP/M
                ;*   0.2  : Code cleanup and optimisation
                ;*   0.3  : Return to CP/M using Warm Reboot
                ;*   0.4  : Check return code from RTC
                ;*   
                ;* ------------------------------------------------------------------------- *
                ;
                ;* ------------------------------------------------------------------------- *
                ;*             GNU LICENSE CONDITIONS
                ;* ------------------------------------------------------------------------- *
                ;* This program is free software; you can redistribute it and/or modify
                ;* it under the terms of the GNU General Public License as published by
                ;* the Free Software Foundation; either version 2 of the License, or
                ;* (at your option) any later version.
                ;*
                ;* This program is distributed in the hope that it will be useful,
                ;* but WITHOUT ANY WARRANTY; without even the implied warranty of
                ;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                ;* GNU General Public License for more details.
                ;*
                ;* You should have received a copy of the GNU General Public License along
                ;* with this program; if not, write to the Free Software Foundation, Inc.,
                ;* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
                ;*
                ;* ------------------------------------------------------------------------- *
                ;*       Copyright (C) December 2021 Gerard Wassink
                ;* ------------------------------------------------------------------------- *
                ;
 0100           START       ORG     0100H
                ;
                ; BDOS and BIOS addresses and functions
                ;
 0000 =         WARMBOOT    EQU     0000H           ; Warm Reboot
 0005 =         BDOS        EQU     0005H           ; BDOS address
 0009 =         PRTSCR      EQU     009H            ; Print $ terminated string function
                ;
 0020 =         RTCGTTM     EQU     020H            ; Get HBIOS time
                ;
                ;* ------------------------------------------------------------------------- *
                ;*                                                                 MAIN LINE *
                ;* ------------------------------------------------------------------------- *
 0100 C5        GAWGETIM    PUSH    B               ; Save
 0101 D5                    PUSH    D               ;  registers
 0102 E5                    PUSH    H               ;   on the stack
                            ;
                            ;       Display starter message
                            ;
 0103 0E09                  MVI     C,PRTSCR        ; Print string function in reg C
 0105 116A01                LXI     D,MSG000        ; Data address in DE
 0108 CD0500                CALL    BDOS            ; Call BDOS for print string function
                            ;
                            ;       Get time from RTC (Real Time Clock)
                            ;
 010B 0620                  MVI     B,RTCGTTM       ; BIOS RTCGETTIM function
 010D 216401                LXI     H,TIMBUF        ; HL points to buffer for BIOS time
 0110 CF                    RST     1               ; Call BIOS function 08H (8 times specified value)
                            ;
                            ;       Check return code
                            ;
 0111 CA1F01                JZ      RTC$OK          ; A=0: OKAY, else error
                            ;
                            ;       Display error message
                            ;
 0114 0E09                  MVI     C,PRTSCR        ; Print string function in reg C
 0116 118101                LXI     D,MSG001        ; Data address in DE
 0119 CD0500                CALL    BDOS            ; Call BDOS for print string function
                            ;
 011C C33901                JMP     ENDMAIN         ; Go back to CP/M
                            ;
                            ;       Convert date from BCD to Ascii
                            ;
 011F =         RTC$OK      EQU $
 011F 016401                LXI     B,BCDDATE       ; BC points to value to convert
 0122 11C901                LXI     D,DSPDATE       ; DE points to receiving buffer
 0125 CD3F01                CALL    BCD2ASCII       ; Convert BCD to displayable
                            ;
                            ;       Convert time from BCD to Ascii
                            ;
 0128 016701                LXI     B,BCDTIME       ; BC points to value to convert
 012B 11D301                LXI     D,DSPTIME       ; DE points to receiving buffer
 012E CD3F01                CALL    BCD2ASCII       ; Convert BCD to displayable
                            ;
                            ;       Print result string
                            ;
 0131 0E09                  MVI     C,PRTSCR        ; Print string function in reg C
 0133 11A701                LXI     D,DISPLTIM      ; Data address in DE
 0136 CD0500                CALL    BDOS            ; Call BDOS for print string function
                            ;
                            ;       Program end, restore registers and return
                            ;
 0139 =         ENDMAIN     EQU $
 0139 E1                    POP     H               ; Restore registers
 013A D1                    POP     D               ;  from the
 013B C1                    POP     B               ;   stack
                            ;
 013C C30000                JMP     WARMBOOT        ; Back to CP/M
                            ;
                ;* ------------------------------------------------------------------------- *
                ;*                 Convert BCD values to ascii bytes for display (BCD2ASCII) *
                ;* ------------------------------------------------------------------------- *
 013F =         BCD2ASCII    EQU     $
                            ;
                            ;       Initialize counter
                            ;
 013F 3E03                  MVI     A,03H           ; load counter for 3 times
 0141 326301                STA     COUNT           ;  and store it
                            ;
                            ;       Loop start
                            ;
 0144 0A        BCDAGAIN:   LDAX    B               ; load BCD value
 0145 E6F0                  ANI     0F0H            ;  Isolate first nibble
 0147 0F                    RRC                     ;   Rotate
 0148 0F                    RRC                     ;    register
 0149 0F                    RRC                     ;     A for
 014A 0F                    RRC                     ;     four times
 014B F630                  ORI     030H            ;      make Ascii number
 014D 12                    STAX    D               ; Store printable value 1st part
                            ;
 014E 13                    INX     D               ; Increment DE for next store
                            ;
 014F 0A                    LDAX    B               ; load value again
 0150 E60F                  ANI     00FH            ;  Isolate second nibble
 0152 F630                  ORI     030H            ;   Make Ascii number
 0154 12                    STAX    D               ; Store printable value 2nd part
                            ;
                            ;       Increment pointers to next values
                            ;
 0155 03                    INX     B               ; Point to next BCD byte
 0156 13                    INX     D               ; Point to 
 0157 13                    INX     D               ;   next Ascii value
                            ;
                            ;       Check for loop end, go around if not
                            ;
 0158 3A6301                LDA     COUNT           ; Get counter value,
 015B 3D                    DCR     A               ;  decrement it
 015C 326301                STA     COUNT           ;   store counter back
                            ;
 015F C24401                JNZ     BCDAGAIN        ; Not done? Again
                            ;
 0162 C9                    RET
                            ;
                ;* ------------------------------------------------------------------------- *
                ;*                                                              DATA STORAGE *
                ;* ------------------------------------------------------------------------- *
 0163 03        COUNT       DB      03H             ; Counter storage
                            ;
 0164 =         TIMBUF      EQU     $               ; Reserve room for date / time buffer
 0164 000000    BCDDATE     DB      00H, 00H, 00H
 0167 000000    BCDTIME     DB      00H, 00H, 00H
                ;
 016A 4741574745MSG000      DB      'GAWGETIM version 0.4', 0DH, 0AH, '$'
 0181 4572726F72MSG001      DB      'Error retrieving time, RTC present?', 0DH, 0AH, '$'
                ;
 01A7 =         DISPLTIM    EQU     $               ; Reserve room for displayable time
 01A7 4375727265            DB      'Current date and time from RTC: 20'
 01C9 30302D3030DSPDATE     DB      '00-00-00, '    ; YEAR, MONTH,DAY
 01D3 30303A3030DSPTIME     DB      '00:00:00'      ; HOURS, MINUTES,SECONDS
 01DB 0D0A                  DB      0DH, 0AH        ; CR/LF
 01DD 24                    DB      '$'             ; End of string character
                ;
 01DE           ENDPROG     END
 